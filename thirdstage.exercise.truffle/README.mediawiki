===Initializing the source project===

* Install <code>go-ethereum</code> binaries and make them on <code>PATH</code>
** https://geth.ethereum.org/downloads/

* Install required pacakges running <code>npm install</code>

<pre style="margin-left:40px">
$ npm install
</pre>

<p style="margin-left:40px">This may take a while. After that there will be local packages under <code>node_modules</code> directory.</p>

* Customize settings in <code>scripts/quorum/solo/config.sh</code>
** <code>quorum[networkid]</code> : Network ID of the Quorum network
** <code>quorum[name]</code> : the name of solo Quorum node, any alpha-numeric string 
** <code>quorum[port]</code> : the TCP listening port of Quorum node, default : 30303
** <code>quorum[type]</code> : 'permissioned', do NOT change
** <code>quorum[rpcaddr]</code> : the binding address for the JSON-RPC service by the Quorum node 
** <code>quorum[rpcaddr]</code> : 
** ...

* Initialize Quorum network using <code>scripts/quorum/solo/init.sh</code>

<pre style="margin-left:40px">
$ ./scripts/quorum/solo/init.sh
</pre>

* Update <code>truffle.js</code> in accordance with <code>config.sh</code>
** Update <code>port</code>, <code>network_id</code>, and <code>from</code> attribute of <code>networks.development</code> node

<pre style="margin-left:40px">
module.exports = {
    networks: {
      development: {
        host: "127.0.0.1",
        port: 8545,
        network_id: 31,
        from: "47173ba217c39dea60c7d115ea956a3e293fb012",
        gas: 0x2fefd8
      }
    }
};
</pre>


===Running the Quorum network===

* Start local Quorum network

<pre style="margin-left:40px">
$
</pre>./scripts/quorum/solo/start.sh

* Run <code>tcpdump</code> to inspect JSON-RPC conversations
** Use another terminal

<pre style="margin-left:40px">
$ sudo tcpdump -n -i eth0 -A -s0 tcp port 8545 and greater 100
</pre>

* Open Geth console to inspect the Quorum node
** Use another terminal

<pre style="margin-left:40px">
$ geth attach ipc:data/geth.ipc
</pre>


===Playing with stmart contracts===

* Write smart contracts

* Compile smart contracts using <code>truffle</code>

* Deploy smart contracts using <code>truffle</code>

* Inspect deployed smart contract using <code>truffle</code>

* Write unit tests

* Run unit test using <code>truffle</code>


===Solidity===

* Strong typed
* Type inferring
* Compiled into binary and netr


===DApp Programming Stack===

* JavaScript
** JavaScript Application ---> Truffle API ---> web3 API ---> Ethereum JSON-RPC API ---> Solidity Smart Contract

* Java
** Java Application ---> web3j API ---> Ethereum JSON-RPC API ---> Solidity Smart Contract

===References===

* '''Ethereum/Geth'''
** [https://github.com/ethereum/wiki/wiki/JavaScript-API Ethereum JavaScript API]
** [https://github.com/ethereum/go-ethereum/wiki/Management-APIs Geth Management API] (Geth)
** [https://github.com/ethereum/wiki/wiki/JSON-RPC Ethereum JSON-RPC API]
** [https://github.com/ethereum/wiki/wiki Ethereum official wiki]
** [http://www.ethdocs.org/en/latest/ Ethereum Homestead Documentation]
** [https://ethereumbuilders.gitbooks.io/guide/content/en/index.html Ethereum Builder's Guide]

* '''Solidity'''
** [https://solidity.readthedocs.io/ Solidity official documentation]
** [https://ethereumbuilders.gitbooks.io/guide/content/en/solidity_tutorials.html Solidity tutorials]
** [https://monax.io/docs/solidity/ Solidity Series]
** [http://solidity.readthedocs.io/en/develop/solidity-by-example.html#voting Solidity Votig Example]

* '''Truffle'''
** [http://truffleframework.com/docs/ Truffle official documentation]
** [http://truffleframework.com/docs/advanced/commands Truffle command reference]
** [http://truffleframework.com/docs/getting_started/contracts Interacting with your contracts]
** [https://github.com/trufflesuite/truffle-contract#api Truffle Contract API]
** [http://truffleframework.com/docs/getting_started/migrations#deployer-api Truffle Deployer API]


