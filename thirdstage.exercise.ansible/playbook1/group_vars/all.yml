--- # Global variables
# For more, refer followings 
#   - http://docs.ansible.com/ansible/latest/intro_inventory.html#splitting-out-host-and-group-specific-data
#   - http://docs.ansible.com/ansible/latest/intro_inventory.html#default-groups

host:
  requirement:
    go:
      ver:
        min: '1.8'
        recommanded:  '1.8'
      apt: 
        package: "golang-1.8-go"  # TODO Try "golang-{{ host.requirement.go.ver.recommanded }}-go"
        repos: ['ppa:gophers/archive', 'ppa:longsleep/golang-backports'] # TODO Check it is possible or not to specify the source file name for PPA
    nodejs:
      ver: # For all Node.js releases, refer 'https://nodejs.org/en/download/releases/'
        pattern: '6\.\(9|10|11|12|13|14\)\.[0-9]+'
        min: '6.9'
        max: '7.0'
      apt:
        package: "nodejs"
        keys: ['https://deb.nodesource.com/gpgkey/nodesource.gpg.key']
        repos: 
          - url: "deb https://deb.nodesource.com/node_6.x {{ ansible_distribution_release }} main"
            filename: 'nodesource'
          - url: "deb-src https://deb.nodesource.com/node_6.x {{ ansible_distribution_release }} main"
            filename: 'nodesource'
    npm:
      ver:
        pattern: '3\.10\.10'
        recommanded: '3.10.10'
    docker:
      ver:
        min: '7.03'

fabric:
  ver: '1.1.0-preview'
  generate:
    crypto:
      skip: true # default: false
      force: true # default: true
    configtx:
      skip: false # default: false
      force: true # default: true 
  distribute:
    crypto:
      skip: false # default: false
      
  init:
  orgs:
    # http://hyperledger-fabric.readthedocs.io/en/release/build_network.html#crypto-generator
    # https://github.com/hyperledger/fabric/blob/v1.1.0-preview/examples/e2e_cli/crypto-config.yaml
    - name: org0 # [A-Za-z][_0-9A-Za-z]*
      type: orderer
      domain: org0
      ca:
        name: ca0
        country: KR
        province: Seoul
        locality: Seoul
        organizationalUnit: OrdererOrg
    - name: org1
      type: peer # 'orderer' or 'peer', default is 'peer'
      ca:
        name: ca1
        country: KR # TODO Review more on moving attributes such as country, province and/or into to 'hostvar/containers/cas' 
        province: Seoul
        locality: Seoul
        organizationalUnit: PeerOrg1
    - name: org2
      type: peer
      ca:
        name: ca2
        country: KR
        province: Seoul
        locality: Seoul
        organizationalUnit: PeerOrg2
    - name: org3
      type: peer
      ca:
        name: ca3
        country: KR
        province: Seoul
        locality: Seoul
        organizationalUnit: PeerOrg3
  channels:
    - name: channel1 # [A-Za-z][_0-9A-Za-z]*
      consortium: Channel1Consortium
      profile: Channel1Profile
      orgs: ['org1', 'org2', 'org3']
    - name: channel2
      consortium: Channel2Consortium
      profile: Channel2Profile
      orgs: ['org1', 'org2', 'org3']
  ordererDefaults:
    # Reference : ...
    batchTimeout: 4s
    batchSize:
      maxMessageCount: 400
      absoluteMaxBytes: 5 MB
      preferredMaxBytes: 1024 KB
  
  accounts:
    - name: user1011
      ca: ca1
      type: user
      # affiliation: # optional
    - name: user1012
      ca: ca1
      type: user
    - name: user2001
      ca: ca2
      type: user
      
    
docker:
  images:
    # For all list of Hyperledger Fabric repositories, refer https://hub.docker.com/u/hyperledger/
    base: &dockerImageBase
      # If you would like to use registry other than Docker Hub, uncomment the following line and ..
      # registry: ''
      tag: "{{ ansible_architecture }}-{{ fabric.ver }}"
    zookeeper:
      <<: *dockerImageBase
      repository: 'hyperledger/fabric-zookeeper'
      src: "https://github.com/hyperledger/fabric/tree/v{{ fabric.ver }}/images/zookeeper"
    kafka:
      <<: *dockerImageBase
      repository: 'hyperledger/fabric-kafka'
    orderer:
      <<: *dockerImageBase
      repository: 'hyperledger/fabric-orderer'
    peer:
      <<: *dockerImageBase
      repository: 'hyperledger/fabric-peer'
    couchdb:
      <<: *dockerImageBase
      repository: 'hyperledger/fabric-couchdb'
    tools:
      <<: *dockerImageBase
      repository: 'hyperledger/fabric-tools'
    ca: # CA Server
      <<: *dockerImageBase
      repository: 'hyperledger/fabric-ca'
    kafkaManager:
      tag: '1.3.3.4'
      repository: 'intropro/kafka-manager'