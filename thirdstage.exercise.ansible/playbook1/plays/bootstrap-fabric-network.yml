
- hosts: all
  tasks:

  # TODO Check IP port availability for all IP ports used containers
  
  - name: Evaluate ZooKeeper emsemble string and connection string
    # TODO Use python script or Jinja2 instead of bash script.
    shell: |
      emsemble_str=
      connect_str=
      
      {% for host in ansible_play_batch|sort %}
        {%- for zk in (hostvars[host].containers|default({})).zookeepers|default([]) %}
      emsemble_str="${emsemble_str} server.{{ zk.id }}={{ hostvars[host].ansible_host }}:{{ zk.config.quorumPort }}:{{ zk.config.electionPort }}"
      connect_str="${connect_str},{{ hostvars[host].ansible_host }}:{{ zk.config.clientPort }}"
        {% endfor -%}
      {%- endfor %}
      
      echo "{ \"emsemble_str\": \"${emsemble_str# }\", \"connect_str\": \"${connect_str#,}\" }"
    become: false
    run_once: true
    delegate_to: 127.0.0.1
    register: eval_zk_strings
    failed_when: (eval_zk_strings.stdout|from_json).emsemble_str|length == 0
    check_mode: false
    tags: ['docker', 'zookeeper', 'kafka']
    
  - name: Test the ouput
    debug:
      msg: 
        - "ZooKeeper Emsemble String: '{{ (eval_zk_strings.stdout|from_json).emsemble_str }}'"
        - "ZooKeeper Connection String: '{{ (eval_zk_strings.stdout|from_json).connect_str }}'" 
    when: false
    run_once: true
    delegate_to: 127.0.0.1
    tags: ['debug']
    
  # Reference
  #   - https://github.com/hyperledger/fabric/tree/v1.1.0-preview/images/zookeeper
  - name: Run ZooKeeper containers
    vars:
      zk_emsemble_str: "{{ (eval_zk_strings.stdout|from_json).emsemble_str }}"
    docker_container:
      image: "{{ docker.images.zookeeper.repository }}:{{ docker.images.zookeeper.tag }}"
      name: "{{ item.name }}"
      network_mode: host
      env:
        ZOO_MY_ID: "{{ item.id }}"
        ZOO_PORT: "{{ item.config.clientPort }}"
        ZOO_TICK_TIME: "{{ item.config.tickTime }}"
        ZOO_INIT_LIMIT: "{{ item.config.initLimit }}"
        ZOO_SYNC_LIMIT: "{{ item.config.syncLimit }}"
        ZOO_SERVERS: "{{ zk_emsemble_str }}"
    with_items: "{{ (containers|default({})).zookeepers|default([]) }}"
    when: true
    tags: ['docker', 'zookeeper']
    
    
  # TODO Verify that ZooKeeper ensemble is in proper state.
    
  # TODO Run some kind of ZooKeeper management tool

  # Reference
  #   - https://github.com/hyperledger/fabric/tree/v1.1.0-preview/images/kafka
  #   - https://kafka.apache.org/documentation/#configuration
  #   - http://hyperledger-fabric.readthedocs.io/en/release/kafka.html
  - name: Run Kafka containers
    vars:
      zk_connect_str: "{{ (eval_zk_strings.stdout|from_json).connect_str }}"  
    docker_container:
      image: "{{ docker.images.kafka.repository }}:{{ docker.images.kafka.tag }}"
      name: "{{ item.name }}"
      network_mode: host
      env:
        KAFKA_ZOOKEEPER_CONNECT: "{{ zk_connect_str }}"
        KAFKA_ADVERTISED_HOST_NAME: "{{ item.name }}"
        KAFKA_BROKER_ID: "{{ item.config['broker.id'] }}"
        KAFKA_LISTENERS: "PLAINTEXT://{{ ansible_host }}:{{ item.port|int }}"
        KAFKA_LOG_RETENTION_MS: -1
        KAFKA_MESSAGE_MAX_BYTES: "{{ item.config['message.max.bytes']|int }}"
        KAFKA_MIN_INSYNC_REPLICAS: "{{ item.config['min.insync.replicas']|int }}"
        KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: false
        KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT.MS: "{{ item.config['zookeeper.connection.timeout.ms'] }}"
        KAFKA_DEFAULT_REPLICATION_FACTOR: "{{ item.config['default.replication.factor']|int }}"
        KAFKA_REPLICA_FETCH_MAX_BYTES: "{{ item.config['replica.fetch.max.bytes']|int }}"
        KAFKA_METRICS_RECORDING_LEVEL: "{{ item.config['metrics.recording.level'] }}"
        KAFKA_HEAP_OPTS: "{{ item.jvm.heapOpts }}"
        KAFKA_JVM_PERFORMANCE_OPTS: "{{ item.jvm.performanceOpts }}"
        KAFKA_GC_LOG_OPTS: "{{ item.jvm.gcLogOpts }}"
        KAFKA_JMX_OPTS: "{{ item.jvm.jmxOpts }} -Dcom.sun.management.jmxremote.rmi.port={{ item.jvm.jmxPort|int }}"
    with_items: "{{ (containers|default({})).kafkas|default([]) }}"
    when: true
    tags: ['docker', 'kafka']

  # Reference
  #   - https://github.com/yahoo/kafka-manager
  #   - https://github.com/montana-ua/kafka-manager-docker
  - name: Run Kafka Manager containers        
    vars:
      zk_connect_str: "{{ (eval_zk_strings.stdout|from_json).connect_str }}"  
    docker_container:
      image: "{{ docker.images.kafkaManager.repository }}:{{ docker.images.kafkaManager.tag }}"
      name: "{{ item.name }}"
      network_mode: host
      env:
        ZK_HOSTS: "{{ zk_connect_str }}"
        KMANAGER_ARGS: "-Dhttp.port={{ item.port }}"
    with_items: "{{ (containers|default({})).kafkaManagers|default([]) }}"
    when: true
    tags: ['docker', 'kafka-manager']  
  
  # For more, refer https://github.com/yahoo/kafka-manager/issues/426      
  - name: Add a cluster into the Kafka Manager
    vars:
      zk_connect_str: "{{ (eval_zk_strings.stdout|from_json).connect_str }}"
      cluster_name: "FabricOrdererKafkas"
      config:
        name: "{{ cluster_name }}"
        curatorConfig: 
          zkConnect: "{{ zk_connect_str }}"
          zkMaxRetry: 100
          baseSleepTimeMs: 100
          maxSleepTimeMs: 1000
        enabled: true
        kafkaVersion: "0.10.1.0" # for Fabric 1.1.0-preview
        jmxEnabled: true
        jmxSsl: false
        tuning:
          brokerViewUpdatePeriodSeconds: 30
    znode:
      hosts: "{{ zk_connect_str }}"
      name: "/kafka-manager/configs/{{ cluster_name }}"
      value: "{{ config|to_json|string }}"
      state: present
    run_once: true
    delegate_to: 127.0.0.1
    tags: ['docker', 'kafka-manager']
    # Add Kafka Manager URL into notice messages.
    
  
  # Reference
  #   - https://github.com/hyperledger/fabric/blob/v1.1.0-preview/examples/cluster/config/fabric-ca-server-config.yaml
  #   - https://github.com/hyperledger/fabric/blob/v1.1.0-preview/examples/e2e_cli/docker-compose-e2e.yaml
  - name: Run Fabric CA server containers
    vars:
      orgName: "{{ (fabric.orgs|selectattr('ca.commonName', 'equalto', item.name)|first).name }}"
      orgType: "{{ (fabric.orgs|selectattr('ca.commonName', 'equalto', item.name)|first).type }}"
    docker_container:
      image: "{{ docker.images.ca.repository }}:{{ docker.images.ca.tag }}"
      name: "{{ item.name }}"
      network_mode: host
      env:
        FABRIC_CA_SERVER_HOME: /etc/hyperledger/fabric-ca-server
        FABRIC_CA_SERVER_PORT: "{{ item.port }}"
        FABRIC_CA_SERVER_DEBUG: "{{ item.config.debug }}"
        FABRIC_CA_SERVER_TLS_ENABLED: "{{ item.config.tls.enabled }}"
        # TODO Enabling TLS for Fabric CA server 
        # FABRIC_CA_SERVER_TLS_CERTFILE: 
        # FABRIC_CA_SERVER_TLS_KEYFILE: 
        FABRIC_CA_SERVER_CA_NAME: "{{ item.name }}"
        FABRIC_CA_SERVER_CA_KEYFILE: /etc/hyperledger/fabric-ca-server-config
        FABRIC_CA_SERVER_CA_CERTFILE: "/etc/hyperledger/fabric-ca-server-config/{{ item.name }}-cert.pem"
        FABRIC_CA_SERVER_DB_TLS_ENABLED: false
        FABRIC_CA_SERVER_LDAP_ENABLED: false
      volumes:
        - "{{ ansible_env.HOME }}/fabric/{{ fabric.ver }}/crypto/{{ orgType }}Organizations/{{ orgName }}/ca:/etc/hyperledger/fabric-ca-server-config"
        - "{{ ansible_env.HOME }}/fabric/{{ fabric.ver }}/volumes/{{ item.name }}/etc/hyperledger/fabric-ca-server:/etc/hyperledger/fabric-ca-server"
    with_items: "{{ (containers|default({})).cas|default([]) }}"
    when: true
    tags: ['docker', 'fabric-ca']
      
    
  # Reference
  #   - https://github.com/hyperledger/fabric/blob/v1.1.0-preview/sampleconfig/orderer.yaml
  #   - https://github.com/hyperledger/fabric/blob/v1.1.0-preview/examples/e2e_cli/base/docker-compose-base.yaml
  - name: Run Fabric Orderer containers
    docker_container:
      image: "{{ docker.images.orderer.repository }}:{{ docker.images.orderer.tag }}"
      name: "{{ item.name }}"
      network_mode: host
      env:
        ORDERER_GENERAL_LEDGERTYPE: file # A production file-based ledger, fixed
        ORDERER_GENERAL_LISTENADDRESS: "{{ item.address }}"
        ORDERER_GENERAL_LISTENPORT: "{{ item.port }}"
        ORDERER_GENERAL_TLS_ENABLED: true  # fixed
        ORDERER_GENERAL_TLS_PRIVATEKEY: /var/hyperledger/orderer/tls/server.key
        ORDERER_GENERAL_TLS_CERTIFICATE: /var/hyperledger/orderer/tls/server.crt
        ORDERER_GENERAL_TLS_ROOTCAS: [/var/hyperledger/orderer/tls/ca.crt]
        ORDERER_GENERAL_TLS_CLIENTAUTHENABLED: false # fixed
        ORDERER_GENERAL_LOGLEVEL: "{{ item.config.General.LogLevel }}"
        ORDERER_GENERAL_GENESISMETHOD: file  # provisional | file
        ORDERER_GENERAL_GENESISFILE: /var/hyperledger/orderer/orderer.genesis.block
        ORDERER_GENERAL_LOCALMSPDIR: /var/hyperledger/orderer/msp
        ORDERER_GENERAL_LOCALMSPID: "{{ item.org }}"
        ORDERER_GENERAL_PROFILE_ENABLED: "{{ item.config.General.Profile.Enabled }}"
        ORDERER_GENERAL_PROFILE_ADDRESS: "{{ item.config.General.Profile.Address }}"
        ORDERER_FILELEDGER_LOCATION: /var/hyperledger/production/orderer
        ORDERER_KAFKA_RETRY_SHORTINTERVAL: "{{ item.config.Kafka.Retry.ShortInterval }}"
        ORDERER_KAFKA_RETRY_SHORTTOTAL: "{{ item.config.Kafka.Retry.ShortTotal }}"
        ORDERER_KAFKA_VERBOSE: "{{ item.config.Kafka.Verbose }}"
        ORDERER_KAFKA_TLS_ENABLED: false # TODO Is this Okay for production systems ?
        CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE: host
      volumes:
        - "{{ ansible_env.HOME }}/fabric/{{ fabric.ver }}/configtx/genesis.block:/var/hyperledger/orderer/orderer.genesis.block"
        - "{{ ansible_env.HOME }}/fabric/{{ fabric.ver }}/crypto/ordererOrganizations/{{ item.org }}/orderers/{{ item.name }}/msp:/var/hyperledger/orderer/msp"
        - "{{ ansible_env.HOME }}/fabric/{{ fabric.ver }}/crypto/ordererOrganizations/{{ item.org }}/orderers/{{ item.name }}/tls/:/var/hyperledger/orderer/tls"
        - "{{ ansible_env.HOME }}/fabric/{{ fabric.ver }}/volumes/{{ item.name }}/var/hyperledger/production/orderer:/var/hyperledger/production/orderer"
      # TODO What about working_dir?  Refer https://github.com/hyperledger/fabric/blob/v1.1.0-preview/examples/e2e_cli/base/docker-compose-base.yaml
    with_items: "{{ (containers|default({})).orderers|default([]) }}"
    when: true
    tags: ['docker', 'fabric-orderer']

  # TODO Check out 4369 or 9100 port of CouchDB
  # Reference
  #   - https://github.com/hyperledger/fabric/tree/v1.1.0-preview/images/couchdb
  #   - https://github.com/hyperledger/fabric/blob/v1.1.0-preview/examples/e2e_cli/docker-compose-couch.yaml
  - block:
    - name: Just create CouchDB containers
      docker_container:
        image: "{{ docker.images.couchdb.repository }}:{{ docker.images.couchdb.tag }}"
        name: "{{ item.name }}"
        state: started
        interactive: true
        tty: true
        detach: true
        network_mode: host
        volumes:
          - "{{ ansible_env.HOME }}/fabric/{{ fabric.ver }}/volumes/{{ item.name }}/opt/couchdb/data:/opt/couchdb/data|e"
          - "{{ ansible_env.HOME }}/fabric/{{ fabric.ver }}/volumes/{{ item.name }}/opt/couchdb/var/log:/opt/couchdb/var/log"
        entrypoint: /bin/bash
      with_items: "{{ (containers|default({})).couchdbs|default([]) }}"
    - name: Wait for a moment before the container created completely
      wait_for: timeout=2
      with_items: "{{ (containers|default({})).couchdbs|default([]) }}"
    - name: Optimize CouchDB configuration
      shell: |
        docker exec -i "{{ item.name }}" sed -i 's/^\(q=[0-9]*\)/;&/' /opt/couchdb/etc/default.ini
        docker exec -i "{{ item.name }}" sed -i 's/^\(q=[0-9]*\)/;&/' /opt/couchdb/etc/default.ini
        docker exec -i "{{ item.name }}" bash -c "cat >> /opt/couchdb/etc/local.d/docker.ini << HERE
        {{  lookup('file', '../files/couchdb.ini') }}  
        HERE"
      with_items: "{{ (containers|default({})).couchdbs|default([]) }}"
      ignore_errors: true # temporary
    when: true
    tags: ['docker', 'couchdb']

      