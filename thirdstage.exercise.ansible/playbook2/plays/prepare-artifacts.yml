- hosts: localhost
  tasks:
  
  - name: Debugging tasks
    block:
    - name: Print out Anisible hosts
      debug:
        msg:
          - "playbook_dir : {{ playbook_dir }}"
          - "ansible_play_hosts : {{ ansible_play_hosts }}"
          - "ansible_play_batch : {{ ansible_play_batch }}"
          - "hostvars|list : {{ hostvars|list }}"
      tags: ['debug']
    - name: Print out Quorum nodes
      debug:
        msg: "{{ item }}"
      with_items:  "{{ hostvars.values()|selectattr('quorum', 'defined')|map(attribute='quorum')|selectattr('nodes', 'defined')|map(attribute='nodes')|list }}" 
    name: Debug tasks
    when: true
    tags: ['debug']
  
  - name: Prepare Quroum and Constellation binaries for control machine
    block:
    - name: Install required Python library for the control machine
      pip:
        name: pexpect
        version: 4.3
      become: false
    - name: Clone or update Quorum source repository from GitHub to the control machine
      git: 
        repo: 'https://github.com/jpmorganchase/quorum.git'
        dest: "{{ common.host.layout.git_repo_base }}/quorum"
        clone: true
        update: true
        version: "v{{ common.quorum.version.node }}"
      become: false
      register: update_quorum_src_result
      changed_when: update_quorum_src_result.after != update_quorum_src_result.before
    - name: Build Quorum
      make:
       chdir: "{{ common.host.layout.git_repo_base }}/quorum"
       target: all
      when: update_quorum_src_result.changed
      become: false
    - name: Copy Quorum binaries to '/usr/local/bin' of the control machine
      copy:
        src:  "{{ common.host.layout.git_repo_base }}/quorum/build/bin/{{ item }}"
        dest: /usr/local/bin
        owner: root
        group : root
        mode: 0755
      with_items: ['geth', 'bootnode']
      become: true
    - name: Install packages required for Constellation node into the control machine
      apt:
        name: "{{ item }}" 
      with_items: ['libdb-dev', 'libleveldb-dev', 'libsodium-dev', 'zlib1g-dev', 'libtinfo-dev']
      become: false
    - name: Check whether the constellation is already installed or not
      shell :  |
        . ~/.profile > /dev/null
        
        if [ `which constellation-node | wc -l` -gt 0 ]; then 
          constellation-node --version
        fi
      become: true
      ignore_errors: true
      register: check_constellation_result
      changed_when: false

    - name: Create directories to save downloaded files
      file:
        path: "{{ ansible_env.HOME }}/Downloads/"
        state: directory
        mode: 0755
      when: not check_constellation_result.stdout.endswith(common.quorum.version.constellation)
      become: false

    - name: Downlaod Constellation binary archive
      get_url:
        url: "{{ common.quorum.download.constellation }}" 
        dest: "{{ ansible_env.HOME }}/Downloads/"
        mode: 0644
      when: not check_constellation_result.stdout.endswith(common.quorum.version.constellation)
      become: false
      register: download_constellation_result

    - name: Unzip Constellation binary archive
      vars: 
        filename: "{{ common.quorum.download.constellation|regex_replace('^.*/', '') }}"
      unarchive:
        src: "{{ ansible_env.HOME }}/Downloads/{{ filename }}"
        dest: /usr/local/bin
        extra_opts: ['--strip-components=1']
        owner: root
        group: root
        mode: 0755
      when: not check_constellation_result.stdout.endswith(common.quorum.version.constellation)
      become: true
    when: false
    tags: ['control-machine']


  # TODO Check skip flags and backup first when doing
  - name: Generate data files to bootstrap Quroum nodes
    vars:
      generation_dir: "{{ playbook_dir }}/../generated"
    block:
    - name: Backup and remove the previously generated Quroum data files if exist
      shell: |
          . ~/.profile
          cd '{{ playbook_dir }}/..'
  
          # Backup current crypto artifacts previously generated
          if [ `ls -A ./generated/quorum | wc -l` -gt 0 ]; then
            mv ./generated/quorum ./generated/quorum-{{ lookup('pipe','date +%y%m%dT%H%M%S')  }}
          fi
      args:
        executable: /bin/bash 
      become: false
      tags: []
    - name: Create directories for Quorum nodes to save generated files
      file:
        path: "{{ generation_dir }}/quorum/{{ item.0.name ~ item.1 }}"
        state: directory
        mode: 0755
      with_nested: 
        - "{{ hostvars.values()|selectattr('quorum', 'defined')|map(attribute='quorum')|selectattr('nodes', 'defined')|map(attribute='nodes')|sum(start=[])|list }}"
        - ['/data/geth', '/data/keystore', '/constellation']
      become: false  
    - name: Generate nodekeys for Quorum nodes
      command: bootnode -genkey "{{ generation_dir }}/quorum/{{ item.name }}/data/geth/nodekey"
      with_items: "{{ hostvars.values()|selectattr('quorum', 'defined')|map(attribute='quorum')|selectattr('nodes', 'defined')|map(attribute='nodes')|list }}" 
      become: false
      tags: []
    - name: Get enode IDs from nodekeys for Quorum nodes
      shell: bootnode -nodekey "{{ generation_dir }}/quorum/{{ item.name }}/data/geth/nodekey" -writeaddress > "{{ generation_dir }}/quorum/{{ item.name }}/data/geth/nodeid"
      register: get_nodeids_result 
      with_items: "{{ hostvars.values()|selectattr('quorum', 'defined')|map(attribute='quorum')|selectattr('nodes', 'defined')|map(attribute='nodes')|list }}"
    - name: Generate 'permissioned-nodes.json' file
      template:
        src: "{{ playbook_dir }}/../templates/permissioned-nodes.json.j2"
        dest: "{{ generation_dir }}/quorum/permissioned-nodes.json"
        mode: "u=rw,g=r,o=r"
      become: false
    - name: Generate accounts for each Quorum node
      shell: |
        . ~/.profile
        cd '{{ playbook_dir }}/..'
        
        echo '{{ item.accounts.prepared.password }}' > './generated/quorum/{{ item.name }}/data/passwd'
        
        for i in {1..{{ item.accounts.prepared.count }}}; do
          geth account new --keystore './generated/quorum/{{ item.name }}/data/keystore' --password './generated/quorum/{{ item.name }}/data/passwd'
        done
        
        rm -f './generated/quorum/{{ item.name }}/data/passwd'
      args:
        executable: /bin/bash  
      with_items: "{{ hostvars.values()|selectattr('quorum', 'defined')|map(attribute='quorum')|selectattr('nodes', 'defined')|map(attribute='nodes')|list }}"
    - name: Generate 'genesis.json' file
      template:
        src: "{{ playbook_dir }}/../templates/genesis.json.j2"
        dest: "{{ generation_dir }}/quorum/genesis.json"
        mode: "u=rw,g=r,o=r"
      become: false
    - name: Generate transaction manager configuration files for each one
      template:
        src: "{{ playbook_dir }}/../templates/tm.conf.j2"
        dest: "{{ generation_dir }}/quorum/{{ item.name }}/constellation/tm.conf"
        mode: "u=rw,g=r,o=r"
      with_items: "{{ hostvars.values()|selectattr('quorum', 'defined')|map(attribute='quorum')|selectattr('nodes', 'defined')|map(attribute='nodes')|sum(start=[])|list }}"
      become: false  
    - name: Generate key files for each transaction manager
      expect:
        command: constellation-node --generatekeys=tm
        responses:
           'Lock key pair.*' : ''
        chdir: "{{ generation_dir }}/quorum/{{ item.name }}/constellation"
      with_items: "{{ hostvars.values()|selectattr('quorum', 'defined')|map(attribute='quorum')|selectattr('nodes', 'defined')|map(attribute='nodes')|sum(start=[])|list }}"
      become: false
    when: not common.quorum.skips.generate_data
    tags: ['generate'] 
