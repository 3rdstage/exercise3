- hosts: all
  vars:
  tasks:
  - name: Start constellation nodes
    # References
    #   - https://github.com/jpmorganchase/quorum-examples/blob/master/examples/7nodes/constellation-start.sh
    #   - https://github.com/jpmorganchase/constellation/blob/master/sample.conf
    #   - https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options
    vars:
      tls: "{{ item.constellation.tls|default(common.quorum.constellation.tls) }}"
      
      protocol: >-2
        {%- if tls == 'strict' -%}'http'{%- else -%}'http'{%- endif -%}
    shell: |
      . ~/.profile
    
      # Check whether the port is already in use or not
      if [ `lsof -i -P -n | grep LISTEN | grep {{ item.constellation.port }} | wc -l` -gt 0 ]; then
        echo "The port {{ item.constellation.port }} for constellation node is already in use by another process."
        exit 101
      fi
      
      mkdir -p "{{ item.name }}/logs"
      
      if [ '{{ item.constellation.bootnode }}' != 'true' ]; then
        echo 'This constellation is not boot node, so wait a little before boot nodes started in advance'
        sleep 5s
      fi
      
      # TODO Remove socket file created previously.
      
      # TODO Generate TLS keys beforehand refering
      #      - https://workaround.org/ispmail/jessie/create-certificate
      
      # TODO Generated tm.conf is not in use.
      set -u
      set -e
      nohup constellation-node "{{ item.name }}/constellation/{{ item.constellation.name }}.conf" >> "{{ item.name }}/logs/constellation.log" 2>&1 &
      
      echo 'Started constellation node in background'
    args:
      executable: /bin/bash
      chdir: "{{ ansible_env.HOME }}/quorum"
    with_items: "{{ quorum.nodes }}"
    when: (quorum|default({})).nodes|default([])
    become: false
    tags: ['constellation']
    
  - name: Wait a moment before all the contellation nodes have started
    wait_for: timeout=5
    when: (quorum|default({})).nodes|default([])
        
  - name: Start Ethereum nodes
    shell: |
      . ~/.profile
      
      # Create password file for prepared account
      echo "{{ item.accounts.prepared.password }}" > "{{ item.name }}/passwd"

      unlocks=
      for i in {2..99}; do
        unlocks=${unlocks},${i}
      done;
      unlocks=${unlocks#,}
      
      # Check whether the ports are already in use or not
      port_in_use=false
      if [ `lsof -i -P -n | grep LISTEN | grep {{ item.port }} | wc -l` -gt 0 ]; then
        echo "The listening port {{ item.port }} for '{{ item.name }}' ethereum node is already in use by another process."
        port_in_use=true
      fi
      if [ `lsof -i -P -n | grep LISTEN | grep {{ item.rpcport }} | wc -l` -gt 0 ]; then
        echo "The RPC port {{ item.rpcport }} for '{{ item.name }}' ethereum node is already in use by another process."
        port_in_use=true
      fi
      if [ `lsof -i -P -n | grep LISTEN | grep {{ item.raftport }} | wc -l` -gt 0 ]; then
        echo "The RAFT port {{ item.raftport }} for '{{ item.name }}' ethereum node is already in use by another process."
        port_in_use=true
      fi
      if [ ${port_in_use} == 'true' ]; then
        exit 101
      fi
      
      # TODO Set permissioned configurable
      # TODO Try to use following options explicitly : 
      #   --identity value         Custom node name
      #   --permissioned           If enabled, the node will allow only a defined list of nodes to connect
      #   --cache value            Megabytes of memory allocated to internal caching (min 16MB / database forced) (default: 128)
      #   --trie-cache-gens value  Number of trie node generations to keep in memory (default: 120)
      #   --maxpeers value         Maximum number of network peers (network disabled if set to 0) (default: 25)
      #   --nodiscover             Disables the peer discovery mechanism (manual peer addition)
      #   --netrestrict value      Restricts network communication to the given IP networks (CIDR masks)
      #   --exec value           Execute JavaScript statement
      #   --preload value        Comma separated list of JavaScript files to preload into the console
      set -e
      set -v
      PRIVATE_CONFIG={{ item.name }}/constellation/{{ item.constellation.name }}.conf \
      nohup geth --datadir "{{ item.name }}/data" \
                 --port {{ item.port }} \
                 --permissioned --nodiscover --maxpeers 10 \
                 --cache {{ common.quorum.cache }} --trie-cache-gens 360 \
                 --raft --raftport {{ item.raftport }} --raftblocktime {{ common.quorum.raftblocktime }} \
                 --rpc --rpcaddr {{ item.rpcaddr }} --rpcport {{ item.rpcport }} --rpcapi {{ common.quorum.rpcapi }} \
                 --emitcheckpoints \
                 --unlock 0 \  {# Comma separated list of accounts to unlock #}
                 --password "{{ item.name }}/passwd" 2>> "{{ item.name }}/logs/geth.log" &
      set +v
      
      # TODO Find the way remove passwd file in safe way.
      # rm -f "quorum/{{ item.name }}/passwd"
      
      echo 'Started ethereum node in background'
    args:
      executable: /bin/bash
      chdir: "{{ ansible_env.HOME }}/quorum"
    with_items: "{{ quorum.nodes }}"
    when: (quorum|default({})).nodes|default([])
    become: false
    tags: ['ethereum']
